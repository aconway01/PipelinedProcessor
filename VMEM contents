Add, Sub, and Sys instruction. using Aik spec:

Add		:= 0:4 1:12
Lt		:= 0:4 2:12
Sub		:= 0:4 3:12
And		:= 0:4 4:12
Or		:= 0:4 5:12
Xor		:= 0:4 6:12
Dup		:= 0:4 7:12
Ret		:= 0:4 8:12
Sys		:= 0:4 9:12
Load	:= 0:4 a:12 
Store	:= 0:4 b:12
Test		:= 0:4 c:12

Get .i12	:= 1:4   .i12:12
Pop .i12	:= 2:4   .i12:12
Put .i12	:= 3:4 .i12:12


Call .i16 ?((.&0xf000)==(.i16&0xf000))	:= 4:4 .i16:12
Call .i16	:= 15:4 0:8 (.i16>>12):4 4:4 .i16:12

JumpF .i16 ?((.&0xf000)==(.i16&0xf000))	:= 5:4 .i16:12
JumpF .i16	:= 15:4 0:8 (.i16>>12):4 5:4 .i16:12


Jump .i16 ?((.&0xf000)==(.i16&0xf000))	:= 6:4 .i16:12
Jump .i16	:= 15:4 0:8 (.i16>>12):4 6:4 .i16:12


JumpT .i16 ?((.&0xf000)==(.i16&0xf000))	:= 7:4 .i16:12
JumpT .i16	:= 15:4 0:8 (.i16>>12):4 7:4 .i16:12

Push .i16 ?(((.i16&0xf800)==0xf800)||((.i16&0xf800)==0))	:= 8:4 .i16:12
Push .i16	:= 15:4 0:8 (.i16>>12):4 8:4 .i16:12

Pre .i16	:= 9:4 0:8 (.i16>>12):4
.segment .text 16 0x10000 0 .VMEM
.segment .data 16 0x10000 0x0000 .VMEM
.const 0 .lowfirst ; was wrong endian


VMEM0:

//generated by AIK version 20070512
@0000
0001
0003
0009
//end

VMEM1

//generated by AIK version 20070512//end
